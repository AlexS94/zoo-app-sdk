/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AnimalDAO;
import io.swagger.client.model.EnclosureDAO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * EmployeeDAO
 */


public class EmployeeDAO {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("lastName")
  private String lastName = null;

  /**
   * Gets or Sets profession
   */
  @JsonAdapter(ProfessionEnum.Adapter.class)
  public enum ProfessionEnum {
    VETERINARIAN("VETERINARIAN"),
    ZOOKEEPER("ZOOKEEPER"),
    SELLER("SELLER"),
    EMPLOYEE("EMPLOYEE");

    private String value;

    ProfessionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProfessionEnum fromValue(String input) {
      for (ProfessionEnum b : ProfessionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProfessionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfessionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ProfessionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ProfessionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("profession")
  private ProfessionEnum profession = null;

  @SerializedName("enclosureList")
  private List<EnclosureDAO> enclosureList = null;

  @SerializedName("animalList")
  private List<AnimalDAO> animalList = null;

  public EmployeeDAO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public EmployeeDAO firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @Schema(description = "")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public EmployeeDAO lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @Schema(description = "")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public EmployeeDAO profession(ProfessionEnum profession) {
    this.profession = profession;
    return this;
  }

   /**
   * Get profession
   * @return profession
  **/
  @Schema(description = "")
  public ProfessionEnum getProfession() {
    return profession;
  }

  public void setProfession(ProfessionEnum profession) {
    this.profession = profession;
  }

  public EmployeeDAO enclosureList(List<EnclosureDAO> enclosureList) {
    this.enclosureList = enclosureList;
    return this;
  }

  public EmployeeDAO addEnclosureListItem(EnclosureDAO enclosureListItem) {
    if (this.enclosureList == null) {
      this.enclosureList = new ArrayList<EnclosureDAO>();
    }
    this.enclosureList.add(enclosureListItem);
    return this;
  }

   /**
   * Get enclosureList
   * @return enclosureList
  **/
  @Schema(description = "")
  public List<EnclosureDAO> getEnclosureList() {
    return enclosureList;
  }

  public void setEnclosureList(List<EnclosureDAO> enclosureList) {
    this.enclosureList = enclosureList;
  }

  public EmployeeDAO animalList(List<AnimalDAO> animalList) {
    this.animalList = animalList;
    return this;
  }

  public EmployeeDAO addAnimalListItem(AnimalDAO animalListItem) {
    if (this.animalList == null) {
      this.animalList = new ArrayList<AnimalDAO>();
    }
    this.animalList.add(animalListItem);
    return this;
  }

   /**
   * Get animalList
   * @return animalList
  **/
  @Schema(description = "")
  public List<AnimalDAO> getAnimalList() {
    return animalList;
  }

  public void setAnimalList(List<AnimalDAO> animalList) {
    this.animalList = animalList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeDAO employeeDAO = (EmployeeDAO) o;
    return Objects.equals(this.id, employeeDAO.id) &&
        Objects.equals(this.firstName, employeeDAO.firstName) &&
        Objects.equals(this.lastName, employeeDAO.lastName) &&
        Objects.equals(this.profession, employeeDAO.profession) &&
        Objects.equals(this.enclosureList, employeeDAO.enclosureList) &&
        Objects.equals(this.animalList, employeeDAO.animalList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, lastName, profession, enclosureList, animalList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeDAO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    profession: ").append(toIndentedString(profession)).append("\n");
    sb.append("    enclosureList: ").append(toIndentedString(enclosureList)).append("\n");
    sb.append("    animalList: ").append(toIndentedString(animalList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
