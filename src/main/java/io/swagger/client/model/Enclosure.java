/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EmployeeDAO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Enclosure
 */


public class Enclosure {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets size
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    SMALL("SMALL"),
    MEDIUM("MEDIUM"),
    LARGE("LARGE");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SizeEnum fromValue(String input) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SizeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("size")
  private SizeEnum size = null;

  @SerializedName("employeeList")
  private List<EmployeeDAO> employeeList = null;

  public Enclosure id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Enclosure name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Enclosure size(SizeEnum size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(required = true, description = "")
  public SizeEnum getSize() {
    return size;
  }

  public void setSize(SizeEnum size) {
    this.size = size;
  }

  public Enclosure employeeList(List<EmployeeDAO> employeeList) {
    this.employeeList = employeeList;
    return this;
  }

  public Enclosure addEmployeeListItem(EmployeeDAO employeeListItem) {
    if (this.employeeList == null) {
      this.employeeList = new ArrayList<EmployeeDAO>();
    }
    this.employeeList.add(employeeListItem);
    return this;
  }

   /**
   * Get employeeList
   * @return employeeList
  **/
  @Schema(description = "")
  public List<EmployeeDAO> getEmployeeList() {
    return employeeList;
  }

  public void setEmployeeList(List<EmployeeDAO> employeeList) {
    this.employeeList = employeeList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Enclosure enclosure = (Enclosure) o;
    return Objects.equals(this.id, enclosure.id) &&
        Objects.equals(this.name, enclosure.name) &&
        Objects.equals(this.size, enclosure.size) &&
        Objects.equals(this.employeeList, enclosure.employeeList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, size, employeeList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Enclosure {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    employeeList: ").append(toIndentedString(employeeList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
